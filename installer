#!/bin/bash

if command -v apt >/dev/null; then
  echo "Using aptitude ..."
else
  echo "Installing aptitude ..."
  sudo apt install --install-recommends -y aptitude
fi

sudo aptitude update && sudo aptitude upgrade -y

# docker
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# Sublime text
wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/sublimehq-archive.gpg > /dev/null
echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list

# Google Cloud SDK
curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list

# google chrome (also for development)
wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/chrome-keyring.gpg
echo "deb [arch=amd64 signed-by=/usr/share/keyrings/chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee -a /etc/apt/sources.list.d/google.list

# Spotify
curl -sS https://download.spotify.com/debian/pubkey_6224F9941A8AA6D1.gpg | sudo gpg --dearmor --yes -o /etc/apt/trusted.gpg.d/spotify.gpg
echo "deb http://repository.spotify.com stable non-free" | sudo tee /etc/apt/sources.list.d/spotify.list

# code
wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
sudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg
echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" | sudo tee /etc/apt/sources.list.d/vscode.list > /dev/null
rm -f packages.microsoft.gpg

sudo add-apt-repository ppa:ubuntuhandbook1/transmission -y
sudo add-apt-repository ppa:ubuntuhandbook1/audacity -y
sudo add-apt-repository ppa:ubuntuhandbook1/vlc -y
sudo add-apt-repository ppa:linrunner/tlp -y
sudo add-apt-repository universe -y

sudo apt update && sudo apt upgrade -y

sudo apt install --install-recommends -y \
  wget \
  curl \
  whois \
  net-tools \
  nmap \
  apt-transport-https \
  ca-certificates \
  gnupg-agent \
  git \
  build-essential \
  libssl-dev \
  software-properties-common \
  vim \
  sed \
  tree \
  silversearcher-ag \
  xclip \
  htop \
  ncdu \
  terminator \
  screen \
  ssh \
  rsync \
  tmux \
  putty \
  expect \
  xrdp \
  samba \
  passwdqc \
  ecryptfs-utils \
  cryptsetup \
  gparted \
  exfat-fuse \
  hfsplus \
  hfsutils \
  ntfs-3g \
  mtp-tools \
  ipheth-utils \
  ideviceinstaller \
  ifuse \
  unace \
  unrar \
  zip \
  unzip \
  p7zip-full \
  p7zip-rar \
  sharutils \
  rar \
  uudeview \
  mpack \
  arj \
  cabextract \
  file-roller \
  printer-driver-all \
  aircrack-ng \
  gprename \
  renrot \
  cpu-x \
  libimage-exiftool-perl \
  ffmpegthumbnailer \
  ubuntu-restricted-extras \
  ffmpeg \
  libavcodec-extra \
  gnome-session-flashback \
  gnome-tweaks \
  gkrellm \
  conky \
  conky-all \
  lm-sensors \
  tlp \
  tlp-rdw \
  smartmontools \
  ethtool \
  make \
  cmake \
  g++ \
  gcc \
  gitk \
  filezilla \
  default-jre \
  default-jdk \
  cpu-checker \
  remmina \
  rclone \
  vlc \
  vlc-plugin-access-extra \
  libbluray-bdj \
  libdvdcss2 \
  simplescreenrecorder \
  kazam \
  extundelete \
  audacity \
  gphoto2 \
  gthumb \
  jq \
  xsel \
  libnss3-tools \
  libicu-dev \
  libgtkspell-dev \
  libdb++-dev \
  liblucene++-dev \
  libboost-dev \
  libboost-regex-dev \
  libboost-system-dev \
  libcld2-0 \
  libgtkspell3-3-dev \
  libavcodec-dev \
  libavformat-dev \
  libswscale-dev \
  liba52-0.7.4-dev \
  libasound2-dev \
  lua5.2 \
  liblua5.2-dev \
  gthumb
  
# docker
sudo apt install --install-recommends -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

if ! getent group docker > /dev/null; then
    sudo groupadd docker
    echo "Grupo 'docker' creado."
else
    echo "El grupo 'docker' ya existe."
fi

sudo usermod -aG docker "$USER"
echo "Usuario $USER añadido al grupo 'docker'."

sudo apt install --install-recommends -y sublime-text google-chrome-stable spotify-client code google-cloud-cli transmission-gtk

# Transmission
xdg-mime default transmission-gtk.desktop x-scheme-handler/magnet

curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh -o nvm_install.sh
sudo -E bash nvm_install.sh

sudo apt install --install-recommends -y node-typescript gnome-shell-extensions

git clone https://github.com/pop-os/shell.git
cd shell
git checkout master_jammy

# Preguntar si el dispositivo es una notebook
read -p "¿Es este un dispositivo portátil (notebook)? (s/n): " is_notebook
if [[ "$is_notebook" == "s" || "$is_notebook" == "S" ]]; then
    echo "Configurando TLP para optimizar el uso de batería..."
    sudo apt remove laptop-mode-tools
    sudo tlp start
else
    echo "No se configurará TLP."
fi

#restart cache
sudo fc-cache -f -v
