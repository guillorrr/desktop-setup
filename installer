#!/bin/bash

# Function to check the last command's exit status and exit if an error occurs
check_exit_status() {
    if [[ $? -ne 0 ]]; then
        echo "An error occurred. Exiting."
        exit 1
    fi
}

# Check if required commands are available
check_command() {
    if ! command -v "$1" &> /dev/null; then
        echo "$1 is not installed. Installing..."
        sudo apt install --install-recommends -y "$1"
        check_exit_status
    fi
}

# Function to check if a GPG key exists in the system
check_gpg_key() {
    local keyring=$1
    if [[ -f "$keyring" ]]; then
        echo "GPG key $keyring already exists, skipping download."
    else
        echo "Downloading GPG key to $keyring..."
        sudo gpg --dearmor -o "$keyring"
        check_exit_status
    fi
}

# Function to check if a sources list file already exists
check_sources_list() {
    local file=$1
    local content=$2
    if [[ -f "$file" ]]; then
        echo "Sources list $file already exists, skipping creation."
    else
        echo "Creating sources list $file..."
        echo "$content" | sudo tee "$file" > /dev/null
        check_exit_status
    fi
}

# Function to check if a PPA is already added
check_ppa() {
    local ppa=$1
    if grep -h "^deb .*${ppa}" /etc/apt/sources.list /etc/apt/sources.list.d/* > /dev/null 2>&1; then
        echo "PPA $ppa already exists, skipping addition."
    else
        echo "Adding PPA: $ppa"
        sudo add-apt-repository "$ppa" -y
        check_exit_status
    fi
}

# Function to install a .deb file if it was downloaded successfully
install_deb() {
    local file=$1

    if [[ -f "$file" ]]; then
        echo "Installing $file..."
        sudo apt install --install-recommends -y "$PWD/$file"
        if [[ $? -ne 0 ]]; then
            echo "Error installing $file. Exiting."
            exit 1
        fi
    else
        echo "File $file not found, skipping installation."
    fi
}

# download and check functions
download_file() {
    local url=$1
    local file_name=${2:-$(basename "$url")}  # Si no se proporciona un segundo argumento, usa el nombre base de la URL

    if [[ -f "$file_name" ]]; then
        echo "$file_name already exists, skipping download."
    else
        echo "Downloading $file_name..."
        wget -O "$file_name" "$url"
        if [[ $? -ne 0 ]]; then
            echo "Error downloading $file_name. Exiting."
            exit 1
        fi
    fi
}

extract_tar() {
    local file=$1
    local dest=$2
    local base_dir=$(basename "$file" .tar.xz)  # Obtener el nombre base del archivo sin la extensión .tar.xz

    # Verificar si el archivo de tar existe
    if [[ -f "$file" ]]; then
        # Verificar si el directorio de destino existe
        if [[ -d "$dest/$base_dir" && ! -z "$(ls -A "$dest/$base_dir")" ]]; then
            echo "Directory $dest/$base_dir already exists and is not empty. Skipping extraction."
        else
            echo "Extracting $file to $dest..."
            sudo tar -xf "$file" -C "$dest"
            if [[ $? -ne 0 ]]; then
                echo "Error extracting $file. Exiting."
                exit 1
            fi
        fi
    else
        echo "File $file not found. Exiting."
        exit 1
    fi
}


extract_zip() {
    local file=$1
    local dest=$2
    local base_dir=$(basename "$file" .zip)  # Obtener el nombre base del archivo sin la extensión .zip

    if [[ -f "$file" ]]; then
        # Verificar si el directorio de destino ya existe y si no está vacío
        if [[ -d "$dest/$base_dir" && ! -z "$(ls -A "$dest/$base_dir")" ]]; then
            echo "Directory $dest/$base_dir already exists and is not empty. Skipping extraction."
        else
            echo "Extracting $file to $dest..."
            sudo unzip "$file" -d "$dest"
            if [[ $? -ne 0 ]]; then
                echo "Error extracting $file. Exiting."
                exit 1
            fi
        fi
    else
        echo "File $file not found. Exiting."
        exit 1
    fi
}


move_file() {
    local src=$1
    local dest=$2

    # Verificar si la fuente existe
    if [[ -e "$src" ]]; then
        # Verificar si el destino ya existe y no está vacío
        if [[ -e "$dest" && ! -z "$(ls -A "$dest" 2>/dev/null)" ]]; then
            echo "Destination $dest already exists and is not empty. Skipping move."
        else
            echo "Moving $src to $dest..."
            sudo mv "$src" "$dest"
            if [[ $? -ne 0 ]]; then
                echo "Error moving $src to $dest. Exiting."
                exit 1
            fi
        fi
    else
        echo "Source $src not found. Exiting."
        exit 1
    fi
}


# Check if .desktop file exists and is not empty
create_desktop_entry() {
    local file_path=$1
    local content=$2
    local dir_path=$(dirname "$file_path")  # Obtener el directorio del archivo

    # Verificar si el directorio existe
    if [[ ! -d "$dir_path" ]]; then
        echo "Directory $dir_path does not exist. Creating..."
        mkdir -p "$dir_path"  # Crear el directorio si no existe
        if [[ $? -ne 0 ]]; then
            echo "Error creating directory $dir_path. Exiting."
            exit 1
        fi
    fi

    # Verificar si el archivo existe y no está vacío
    if [[ -f "$file_path" && -s "$file_path" ]]; then
        echo "$file_path already exists and is not empty. Skipping creation."
    else
        echo "Creating $file_path..."
        echo -e "$content" > "$file_path"
        if [[ $? -ne 0 ]]; then
            echo "Error creating $file_path. Exiting."
            exit 1
        fi
    fi
}


# Apply permissions only if the file exists
apply_permissions() {
    local file=$1
    local permissions=$2

    if [[ -f "$file" ]]; then
        echo "Applying permissions $permissions to $file..."
        sudo chmod "$permissions" "$file"
    else
        echo "File $file not found, skipping chmod."
    fi
}

# Function to check if the script is running in a graphical environment
check_graphical_environment() {
    if [[ -z "$DISPLAY" ]]; then
        echo "No graphical environment detected. Skipping graphical applications setup."
        return 1
    else
        return 0
    fi
}

# Check if graphical environment is available before executing GUI apps
run_gui_app() {
    local app_cmd=$1
    if check_graphical_environment; then
        echo "Running $app_cmd..."
        sudo sh "$app_cmd"
    else
        echo "Skipping $app_cmd because no graphical environment is available."
    fi
}

# Check if symbolic link exists, and create it if not
create_symlink() {
    local target=$1   # El archivo o directorio al que apunta el enlace
    local link_name=$2   # El nombre del enlace simbólico

    if [[ -L "$link_name" ]]; then
        echo "Symlink $link_name already exists. Skipping creation."
    elif [[ -e "$link_name" ]]; then
        echo "A file or directory named $link_name already exists but is not a symlink. Skipping creation."
    else
        echo "Creating symlink $link_name -> $target..."
        ln -s "$target" "$link_name"
        if [[ $? -ne 0 ]]; then
            echo "Error creating symlink $link_name. Exiting."
            exit 1
        fi
    fi
}


# Ensure wget, curl, gpg are installed
check_command "wget"
check_command "curl"
check_command "gpg"

# Check if aptitude is available or install it
if ! command -v aptitude &> /dev/null; then
    echo "Aptitude not found, installing..."
    sudo apt install --install-recommends -y aptitude
    check_exit_status
else
    echo "Using aptitude ..."
fi

sudo aptitude update && sudo aptitude upgrade -y
check_exit_status

# Docker setup
if ! command -v docker &> /dev/null; then
    echo "Installing Docker..."
    sudo install -m 0755 -d /etc/apt/keyrings
    sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
    check_exit_status
    sudo chmod a+r /etc/apt/keyrings/docker.asc
    check_sources_list "/etc/apt/sources.list.d/docker.list" "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable"
else
    echo "Docker is already installed."
fi

# Sublime Text setup
check_gpg_key "/etc/apt/trusted.gpg.d/sublimehq-archive.gpg"
check_sources_list "/etc/apt/sources.list.d/sublime-text.list" "deb https://download.sublimetext.com/ apt/stable/"

# Google Cloud SDK setup
check_gpg_key "/usr/share/keyrings/cloud.google.gpg"
check_sources_list "/etc/apt/sources.list.d/google-cloud-sdk.list" "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main"

# Google Chrome setup
check_gpg_key "/usr/share/keyrings/chrome-keyring.gpg"
check_sources_list "/etc/apt/sources.list.d/google.list" "deb [arch=amd64 signed-by=/usr/share/keyrings/chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main"

# Spotify setup
check_gpg_key "/etc/apt/trusted.gpg.d/spotify.gpg"
check_sources_list "/etc/apt/sources.list.d/spotify.list" "deb http://repository.spotify.com stable non-free"

# VSCode setup
if [[ ! -f "/etc/apt/keyrings/packages.microsoft.gpg" ]]; then
    wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
    check_exit_status
    sudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg
    check_exit_status
    rm -f packages.microsoft.gpg
fi
check_sources_list "/etc/apt/sources.list.d/vscode.list" "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main"

# Balena Etcher setup
if [[ ! -f "/etc/apt/sources.list.d/balena-etcher.list" ]]; then
    curl -1sLf 'https://dl.cloudsmith.io/public/balena/etcher/setup.deb.sh' | sudo -E bash
    check_exit_status
else
    echo "Balena Etcher repository already added."
fi

# Add other PPAs
repos=(
    "ppa:ubuntuhandbook1/transmission"
    "ppa:ubuntuhandbook1/audacity"
    "ppa:ubuntuhandbook1/vlc"
    "ppa:ubuntuhandbook1/gimp"
    "ppa:linrunner/tlp"
    "ppa:obsproject/obs-studio"
    "ppa:inkscape.dev/stable"
    "ppa:ozmartian/apps"
)

for repo in "${repos[@]}"; do
    check_ppa "$repo"
done

sudo apt update && sudo apt upgrade -y
check_exit_status

# Install necessary software
echo "Installing required software..."
sudo apt install --install-recommends -y \
    wget curl whois net-tools nmap apt-transport-https ca-certificates gnupg-agent git build-essential \
    libssl-dev software-properties-common vim sed tree silversearcher-ag xclip htop ncdu terminator screen \
    ssh openssh-client rsync tmux putty expect xrdp samba passwdqc ecryptfs-utils cryptsetup gparted exfat-fuse \
    hfsplus hfsutils ntfs-3g mtp-tools ipheth-utils ideviceinstaller ifuse unace unrar zip unzip p7zip-full \
    p7zip-rar sharutils rar uudeview mpack arj cabextract file-roller printer-driver-all aircrack-ng gprename \
    renrot cpu-x libimage-exiftool-perl ffmpegthumbnailer ubuntu-restricted-extras ffmpeg libavcodec-extra gnome-session-flashback \
    gnome-tweaks gkrellm conky conky-all lm-sensors tlp tlp-rdw smartmontools ethtool make cmake g++ gcc gitk \
    filezilla default-jre default-jdk cpu-checker remmina rclone vlc vlc-plugin-access-extra libbluray-bdj libdvdcss2 \
    simplescreenrecorder kazam extundelete audacity gphoto2 gthumb jq xsel libnss3-tools libicu-dev libgtkspell-dev \
    libdb++-dev liblucene++-dev libboost-dev libboost-regex-dev libboost-system-dev libcld2-0 libgtkspell3-3-dev \
    libavcodec-dev libavformat-dev libswscale-dev liba52-0.7.4-dev libasound2-dev lua5.2 liblua5.2-dev gthumb gimp \
    gimp-cbmplugs gimp-dds gimp-gap gimp-gluas gimp-gutenprint gimp-normalmap gimp-texturize gphoto2 tldr \
    pronterface photocollage xdotool android-tools-adb android-tools-fastboot docker-ce docker-ce-cli containerd.io \
    docker-buildx-plugin docker-compose-plugin sublime-text google-chrome-stable spotify-client code google-cloud-cli \
    transmission-gtk balena-etcher-electron shutter obs-studio vidcutter pinta openscad inkscape freecad telegram-desktop \
    gdebi wine64
check_exit_status

# Add Docker group and user
if ! getent group docker > /dev/null; then
    sudo groupadd docker
    echo "Group 'docker' created."
else
    echo "Group 'docker' already exists."
fi

sudo usermod -aG docker "$USER"
echo "User $USER added to 'docker' group."

# NVM installation
curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh -o nvm_install.sh
check_exit_status
sudo -E bash nvm_install.sh
check_exit_status

# Node and typescript installation
sudo apt install --install-recommends -y node-typescript gnome-shell-extensions
check_exit_status

# Git clone Pop!_OS Shell
git clone https://github.com/pop-os/shell.git
check_exit_status
cd shell || exit
git checkout master_jammy

# Ask if the device is a notebook
read -p "Is this a laptop? (y/n): " is_notebook
if [[ "$is_notebook" == "y" || "$is_notebook" == "Y" ]]; then
    echo "Configuring TLP for battery optimization..."
    sudo apt remove laptop-mode-tools -y
    sudo tlp start
else
    echo "Skipping TLP configuration."
fi

# download files
cd /tmp


# Dropbox
download_file "https://www.dropbox.com/download?dl=packages/ubuntu/dropbox_2020.03.04_amd64.deb" "dropbox_2020.03.04_amd64.deb"
install_deb "dropbox_2020.03.04_amd64.deb"

# TeamViewer
download_file "https://dl.teamviewer.com/download/linux/version_15x/teamviewer_15.58.4_amd64.deb" "teamviewer_15.58.4_amd64.deb"
install_deb "teamviewer_15.58.4_amd64.deb"

# PDFsam
download_file "https://github.com/torakiki/pdfsam/releases/download/v5.2.8/pdfsam_5.2.8-1_amd64.deb" "pdfsam_5.2.8-1_amd64.deb"
install_deb "pdfsam_5.2.8-1_amd64.deb"

# Slack
download_file "https://downloads.slack-edge.com/desktop-releases/linux/x64/4.40.133/slack-desktop-4.40.133-amd64.deb" "slack-desktop-4.40.133-amd64.deb"
install_deb "slack-desktop-4.40.133-amd64.deb"

# Discord
download_file "https://dl.discordapp.net/apps/linux/0.0.71/discord-0.0.71.deb" "discord-0.0.71.deb"
install_deb "discord-0.0.71.deb"

# Skype
download_file "https://repo.skype.com/latest/skypeforlinux-64.deb" "skypeforlinux-64.deb"
install_deb "skypeforlinux-64.deb"

# Zoom
download_file "https://zoom.us/client/latest/zoom_amd64.deb" "zoom_amd64.deb"
install_deb "zoom_amd64.deb"

# MySQL Workbench
download_file "https://downloads.mysql.com/archives/get/p/8/file/mysql-workbench-community_8.0.36-1ubuntu22.04_amd64.deb" "mysql-workbench-community_8.0.36-1ubuntu22.04_amd64.deb"
install_deb "mysql-workbench-community_8.0.36-1ubuntu22.04_amd64.deb"

# DBeaver
download_file "https://dbeaver.io/files/dbeaver-ce_latest_amd64.deb" "dbeaver-ce_latest_amd64.deb"
install_deb "dbeaver-ce_latest_amd64.deb"

# Mega.nz
download_file "https://mega.nz/linux/repo/xUbuntu_22.04/amd64/megasync-xUbuntu_22.04_amd64.deb" "megasync-xUbuntu_22.04_amd64.deb"
install_deb "megasync-xUbuntu_22.04_amd64.deb"

# youtube-dl
if [[ ! -f "/usr/local/bin/youtube-dl" ]]; then
    echo "Downloading youtube-dl..."
    sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dl
    if [[ $? -eq 0 ]]; then
        sudo chmod a+rx /usr/local/bin/youtube-dl
    else
        echo "Error downloading youtube-dl. Exiting."
        exit 1
    fi
else
    echo "youtube-dl already exists, skipping download."
fi

# Download and install Blender
download_file "https://mirrors.iu13.net/blender/release/Blender4.2/blender-4.2.3-linux-x64.tar.xz"
extract_tar "blender-4.2.3-linux-x64.tar.xz" "/opt"
move_file "/opt/blender-4.2.3-linux-x64" "/opt/blender"
create_symlink "/opt/blender/blender" "/usr/bin/blender"
create_desktop_entry "~/.local/share/applications/blender.desktop" \
'[Desktop Entry]\nName=Blender\nExec=blender\nComment=\nTerminal=false\nIcon=/opt/blender/blender.svg\nType=Application'

# Download and install DataGrip
download_file "https://download.jetbrains.com/datagrip/datagrip-2024.2.2.tar.gz"
extract_tar "datagrip-2024.2.2.tar.gz" "/opt"
move_file "/opt/DataGrip-2024.2.2" "/opt/datagrip"
run_gui_app "/opt/datagrip/bin/datagrip.sh"

# Download and install PhpStorm
download_file "https://download.jetbrains.com/webide/PhpStorm-2024.2.3.tar.gz"
extract_tar "PhpStorm-2024.2.3.tar.gz" "/opt"
move_file "/opt/PhpStorm-242.23339.16" "/opt/phpstorm"
run_gui_app "/opt/phpstorm/bin/phpstorm.sh"

# Download and install Prusa Slicer
download_file "https://cdn.prusa3d.com/downloads/drivers/prusa3d_linux_2_8_1.zip"
download_file "https://raw.githubusercontent.com/prusa3d/PrusaSlicer/master/resources/icons/PrusaSlicer_128px.png"
extract_zip "prusa3d_linux_2_8_1.zip" "/opt/prusaslicer"
move_file "/opt/prusaslicer/PrusaSlicer-2.8.1+linux-x64-older-distros-GTK3-202409181354.AppImage" "/opt/prusaslicer/PrusaSlicer.AppImage"
move_file "PrusaSlicer_128px.png" "/opt/prusaslicer/PrusaSlicer.png"
sudo rm /opt/prusaslicer/*.txt
apply_permissions "/opt/prusaslicer/PrusaSlicer.AppImage" "a+rx"
apply_permissions "/opt/prusaslicer/PrusaSlicer.png" "a+rx"
create_desktop_entry "~/.local/share/applications/prusaslicer.desktop" \
'[Desktop Entry]\nName=PrusaSlicer\nExec=/opt/prusaslicer/PrusaSlicer.AppImage\nComment=\nTerminal=false\nIcon=/opt/prusaslicer/PrusaSlicer.png\nType=Application'

# Download and install Ultimaker Cura
download_file "https://github.com/Ultimaker/Cura/releases/download/5.8.1/UltiMaker-Cura-5.8.1-linux-X64.AppImage"
download_file "https://upload.wikimedia.org/wikipedia/commons/9/9a/Ultimaker_cura.png"
sudo mkdir -p /opt/cura
move_file "UltiMaker-Cura-5.8.1-linux-X64.AppImage" "/opt/cura/Ultimaker_Cura.AppImage"
move_file "Ultimaker_cura.png" "/opt/cura/Ultimaker_Cura.png"
apply_permissions "/opt/cura/Ultimaker_Cura.AppImage" "a+rx"
apply_permissions "/opt/cura/Ultimaker_Cura.png" "a+rx"
create_desktop_entry "~/.local/share/applications/cura.desktop" \
'[Desktop Entry]\nName=Ultimaker Cura\nExec=/opt/cura/Ultimaker_Cura.AppImage\nComment=\nTerminal=false\nIcon=/opt/cura/Ultimaker_Cura.png\nType=Application'

# Download and install MeshLab
download_file "https://github.com/cnr-isti-vclab/meshlab/releases/download/MeshLab-2023.12/MeshLab2023.12-linux.AppImage"
download_file "https://www.meshlab.net/img/meshlabjsLogo.png"
sudo mkdir -p /opt/meshlab
move_file "MeshLab2023.12-linux.AppImage" "/opt/meshlab/MeshLab.AppImage"
move_file "meshlabjsLogo.png" "/opt/meshlab/MeshLab.png"
apply_permissions "/opt/meshlab/MeshLab.AppImage" "a+rx"
apply_permissions "/opt/meshlab/MeshLab.png" "a+rx"
create_desktop_entry "~/.local/share/applications/meshlab.desktop" \
'[Desktop Entry]\nName=MeshLab\nExec=/opt/meshlab/MeshLab.AppImage\nComment=\nTerminal=false\nIcon=/opt/meshlab/MeshLab.png\nType=Application'

# Download and install tinyMediaManager
download_file "https://release.tinymediamanager.org/v5/dist/tinyMediaManager-5.0.12-linux-amd64.tar.xz"
extract_tar "tinyMediaManager-5.0.12-linux-amd64.tar.xz" "/opt"
sudo chown guillo:guillo -R /opt/tinyMediaManager
apply_permissions "/opt/tinyMediaManager" "a+rx"
create_symlink "/opt/tinyMediaManager/tinyMediaManager" "/usr/bin/tinyMediaManager"
create_desktop_entry "~/.local/share/applications/tinyMediaManager.desktop" \
'[Desktop Entry]\nName=tinyMediaManager\nExec=tinyMediaManager\nComment=\nTerminal=false\nIcon=/opt/tinyMediaManager/tmm.png\nType=Application'

#restart cache
sudo fc-cache -f -v
