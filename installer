#!/bin/bash

nkr_echo() {
  local fmt="$1"; shift
  printf "\n$fmt\n" "$@"
}

nkr_sources() {
  local ppa="$1"
  local source="$2"
    if [ $(grep ^ /etc/apt/sources.list /etc/apt/sources.list.d/* 2>/dev/null | grep -c "$ppa") -eq 0 ];
      then
        nkr_echo "$ppa add successful"
        echo "$source" | sudo tee -a /etc/apt/sources.list.d/"$ppa".list
    fi
}

nkr_ppa() {
  local ppa="$1"
    if [ $(grep ^ /etc/apt/sources.list /etc/apt/sources.list.d/* 2>/dev/null | grep -c "$ppa") -eq 0 ];
      then
        nkr_echo "Adding ppa:$ppa"
        sudo add-apt-repository -y ppa:$ppa;
    fi
}

nkr_ppa_install() {
  local ppa="$1"
    if [ ! $(grep ^ /etc/apt/sources.list /etc/apt/sources.list.d/* 2>/dev/null | grep -c "$ppa") -eq 0 ];
      then
        nkr_echo "Installing $ppa"
        sudo aptitude install -y "$ppa";
    fi
}

nkr_install() {
  local package="$1"
    if [ $(dpkg-query -W -f='${Status}' "$package" 2>/dev/null | grep -c "ok installed") -eq 0 ];
      then
        nkr_echo "Installing $package"
        sudo aptitude install -y "$package";
    fi
}

nkr_snap() {
  local package="$1"
  local version="$2"
    if [ $(snap info "$package" 2>/dev/null | grep -c "installed") -eq 0 ];
      then
        nkr_echo "Installing $package"
        sudo snap install "$package" --"$version";
    fi
}

nkr_code() {
  local package="$1"
    if [ $(code --list-extensions 2>/dev/null | grep -c "$package") -eq 0 ];
      then
        nkr_echo "Installing $package"
        code --install-extension "$package";
    fi
}

nkr_dpkg(){
  local package=$(dpkg-deb -f "$1" Package 2>/dev/null)
    if [ $(dpkg-query -W -f='${Status}' "$package" 2>/dev/null | grep -c "ok installed") -eq 0 ];
      then
        nkr_echo "Installing $package"
        sudo gdebi "$1" -n
    fi
}

nkr_composer(){
  local composer=$1
    if [ $(composer global show 2>/dev/null | grep -c "$composer") -eq 0 ];
      then
        nkr_echo "Installing $composer"
        composer global require "$composer"
    fi
}

export_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT
set -e

if [[ ! -d "$HOME/.bin/" ]]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

nkr_echo "Updating system packages ..."
if command -v aptitude >/dev/null; then
  nkr_echo "Using aptitude ..."
else
  nkr_echo "Installing aptitude ..."
  sudo apt install aptitude
fi

sudo aptitude update && sudo aptitude upgrade -y

# docker
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# Sublime text
wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/sublimehq-archive.gpg > /dev/null
echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list

# Google Cloud SDK
curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list

# google chrome (also for development)
wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/chrome-keyring.gpg
sudo sh -c 'echo "deb [arch=amd64 signed-by=/usr/share/keyrings/chrome-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google.list'

# Microsoft Teams
curl https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg > /dev/null
sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/ms-teams stable main" > /etc/apt/sources.list.d/teams.list'

# Spotify
curl -sS https://download.spotify.com/debian/pubkey_6224F9941A8AA6D1.gpg | sudo gpg --dearmor --yes -o /etc/apt/trusted.gpg.d/spotify.gpg
echo "deb http://repository.spotify.com stable non-free" | sudo tee /etc/apt/sources.list.d/spotify.list

# code
wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
sudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg
echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" | sudo tee /etc/apt/sources.list.d/vscode.list > /dev/null
rm -f packages.microsoft.gpg

# Balena Etcher
# sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 379CE192D401AB61
# nkr_sources balena-etcher-electron "deb https://deb.etcher.io stable etcher"
curl -1sLf 'https://dl.cloudsmith.io/public/balena/etcher/setup.deb.sh' | sudo -E bash

sudo add-apt-repository ppa:ubuntuhandbook1/transmission -y
sudo add-apt-repository ppa:ubuntuhandbook1/audacity -y
sudo add-apt-repository ppa:ubuntuhandbook1/vlc -y
sudo add-apt-repository ppa:linrunner/tlp -y
sudo add-apt-repository ppa:obsproject/obs-studio -y
sudo add-apt-repository universe -y
sudo add-apt-repository ppa:inkscape.dev/stable -y

sudo aptitude update && sudo aptitude upgrade -y

sudo aptitude install -y \
  wget \
  curl \
  whois \
  net-tools \
  nmap \
  ping \
  apt-transport-https \
  ca-certificates \
  gnupg-agent \
  git \
  build-essential \
  libssl-dev \
  software-properties-common \
  vim \
  sed \
  tree \
  silversearcher-ag \
  xclip \
  htop \
  ncdu \
  terminator \
  screen \
  ssh \
  rsync \
  tmux \
  putty \
  expect \
  xrdp \
  samba \
  passwdqc \
  ecryptfs-utils \
  cryptsetup \
  gparted \
  exfat-fuse \
  hfsplus \
  hfsutils \
  ntfs-3g \
  mtp-tools \
  ipheth-utils \
  ideviceinstaller \
  ifuse \
  unace \
  unrar \
  zip \
  unzip \
  p7zip-full \
  p7zip-rar \
  sharutils \
  rar \
  uudeview \
  mpack \
  arj \
  cabextract \
  file-roller \
  printer-driver-all \
  aircrack-ng \
  gprename \
  renrot \
  cpu-x \
  libimage-exiftool-perl \
  ffmpegthumbnailer \
  ubuntu-restricted-extras \
  ffmpeg \
  libavcodec-extra \
  gnome-session-flashback \
  gnome-tweak-tool \
  gkrellm \
  conky \
  conky-all \
  lm-sensors \
  tlp \
  tlp-rdw \
  smartmontools \
  ethtool \
  make \
  cmake \
  g++ \
  gcc \
  gitk \
  filezilla \
  default-jre \
  default-jdk \
  cpu-checker \
  remmina \
  rclone \
  vlc \
  vlc-plugin-access-extra \
  libbluray-bdj \
  libdvdcss2 \
  simplescreenrecorder \
  kazam \
  extundelete \
  audacity \
  gimp \
  gphoto2 \
  gthumb \
  jq \
  xsel \
  libnss3-tools \
  libicu-dev \
  libgtkspell-dev \
  libdb++-dev \
  liblucene++-dev \
  libboost-dev \
  libboost-regex-dev \
  libboost-system-dev \
  libcld2-0 \
  libgtkspell3-3-dev \
  libavcodec-dev \
  libavformat-dev \
  libswscale-dev \
  liba52-0.7.4-dev \
  libasound2-dev \
  lua5.2 \
  liblua5.2-dev \
  gthumb
  
# docker
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
sudo groupadd docker
sudo usermod -aG docker $USER
newgrp docker

sudo apt install sublime-text google-chrome-stable teams spotify-client code google-cloud-cli
sudo apt-get install balena-etcher-electron shutter obs-studio inkscape freecad telegram-desktop gdebi wine64 transmission-gtk
sudo apt upgrade vlc

# TLP - saves battery when Ubuntu is installed on Laptops
sudo apt remove laptop-mode-tools
sudo tlp start

# Transmission
xdg-mime default transmission-gtk.desktop x-scheme-handler/magnet

#restart cache
sudo fc-cache -f -v
